syntax = "proto3";

package linuxWorker;
option go_package="LinuxWorkerPb";


message StartRequest {
    //path of a program or executable
    string command = 1;
    //arguments to invoke program or executable with
    repeated string args = 2;
    // environment variables for the execution
    //OPTIONAL variable
    repeated string env = 3;
    // current working directory of the execution
    //OPTIONAL variable, default will be the working directory of server 
    string dir = 4;
}

message StartResponse {
    //process Id of the running process executed by the command
    //will be 0 if process failed to execute
    int32 pid = 1;
    //univeral unique identifier that tags each unique request made to server
    string uuid = 2;
    //starting time of start request
    string startTimeStamp = 3;
    string status = 4;

}


message StopRequest {
    string uuid = 1;
}

message StopResponse {
    bytes stdout = 1;
    bytes stderr = 2;
    bool isKilled = 3;
    string status = 4;
}


message ProcessInfo {
    int32 pid = 1;
    string startTimeStamp = 2;
    string endTimeStamp = 3;
    string processName = 4;
    string uuid = 5;
    bool isRunning = 6;
    int32 exitCode = 7;
}

message QueryOneProcessRequest {
    string uuid = 1;
}

message QueryOneProcessResponse {
    ProcessInfo procInfo = 1;
    bytes stdout = 2;
    bytes stderr = 3;
    string status = 4;
}

message QueryRunningProcessesRequest {
    //will be empty since the server just needs to verify its a QueryRunningProcessesRequest
}
    
message QueryRunningProcessesResponse {
     repeated ProcessInfo processTable = 1;
     string status = 2;
}

service LinuxService {
    rpc Start(StartRequest) returns(StartResponse){};
    rpc Stop(StopRequest) returns(StopResponse){};
    rpc QueryOneProcess(QueryOneProcessRequest) returns(QueryOneProcessResponse){}
    rpc QueryRunningProcesses(QueryRunningProcessesRequest) returns(QueryRunningProcessesResponse){}

}